import re
t=0
## (3) For the DNA sequence (read in step1): Using regular expression, count the frequency of occurrence of each codon and give its start and end positions in a separate table in the same .txt file.
## (4) For the translated amino acid sequence: Using regular expression, count the frequency of occurrence of each codon and give positions in a separate table in the same .txt file.
## Note: the table should also be generated by program (not copy pasted)
DNA_str = 'ATGGCTGATTAATTGACATTAGGATACTGGGGAATCAGAGGTCTAGGGTAGCCTTTGCGATATTATCTTGAATACCTTGGTTTACCTTATTAGGATAAAAGATACATGTCACCAGAAGAATGGTTTGGGGAAGTTGCCTAACCTCCTCTAAGCAATCAAGTTTTGGTTAACTTGCCATACATAAAGGATGGAGATAGGTGGATTTTCGAAAGCCAGGCTCTCTACGTGTACTTAGCTCATAAAGCCAACAGGACTGACCTCTTAGGGTCGACACCTGAAGAATAGGTGACTGTGGCTTAGGCAAGAGGGGTTCTGTAAGATGTTTTCAAAGTCTTCTACTCATTGCTTGTTCTTCCAGAAGAATAATATTAGGCTTAAAAAGCAGACTACTTCAAAAAGGAAGTGATGTGGCTTCTAGAAAAGCTAAATAAGTTCCTTGATGGAAAGAAGTGGGTGGCAGGTGGCAATCTCACATACATGGACTTCACAATTTATGAATTTGAGGAAACCTTGCAAGCTTATGATCCAGAAACTTTCGATCAATTACCATCCCTCAAGAAACATCAAGAAGAGTTTGCAAACCTTCCAAAAATCAAGGAATATATTGTTTCAGATAAATTTTTGGCAAGACCCTTTTTACCTCCTGACAGATGTAGATGGTATTGA'
Codon = ['AAA','AAT','AAC','AAG','ATA','ATT','ATC','ATG','ACA','ACT','ACC','ACG','AGA','AGT','AGC','AGG',
         'TAA','TAT','TAC','TAG','TTA','TTT','TTC','TTG','TCA','TCT','TCC','TCG','TGA','TGT','TGC','TGG',
         'CAA','CAT','CAC','CAG','CTA','CTT','CTC','CTG','CCA','CCT','CCC','CCG','CGA','CGT','CGC','CGG',
         'GAA','GAT','GAC','GAG','GTA','GTT','GTC','GTG','GCA','GCT','GCC','GCG','GGA','GGT','GGC','GGG']
for n in range(len(Codon)):
    s = [i.start() for i in re.finditer(Codon[n], DNA_str)]
    e = [i.end() for i in re.finditer(Codon[n], DNA_str)]
    for codon_index in range(len(s)-1,-1,-1):
        if s[codon_index]%3 != 0: # delete the codons that are not in frame
            del s[codon_index]
            del e[codon_index]
    result_final = []
    for result in range(len(s)):
        result_final.append(str(s[result])+'-'+str(e[result]-1))

    t += len(result_final)
    print(Codon[n], '\t', result_final)
    





