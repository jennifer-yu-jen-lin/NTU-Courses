# Homework 10
# Lin, Yu-Jen
# NTU student ID: B04B01036
# email: B04B01036@ntu.edu.tw


import re

# 1. Use regular expression to change the input string to the output forms given below:
##	Input text: The quick brown fox jumps over the lazy dog.
##	Output1: The quick brown wolf jumps over the lazy dog.
##	Output2: THE quick brown FOX jumps over the lazy DOG.
print('\n<HW10-1>')
Input = 'The quick brown fox jumps over the lazy dog.'
Output1 = re.sub("fox", "wolf", Input)
Output2 = re.sub("The", "THE", Input)
Output2 = re.sub("fox", "FOX", Output2)
Output2 = re.sub("dog", "DOG", Output2)
print(Output1)
print(Output2)
     
# 2. Write a Python program with regex to remove the parenthesis area in a string.
##	Input data : ["example (.com)", "w3resource", "github (.com)", "stackoverflow (.com)"]
##	Output:
##	example
##	w3resource
##	github
##	stackoverflow
print('\n<HW10-2>')
Input = ["example (.com)", "w3resource", "github (.com)", "stackoverflow (.com)"]
for i in Input:
    print(re.sub(r" ?\([^)]+\)", "", i))

# 3. Write a regex script to split a string with multiple delimiters and out put as a list.
##	Input text: The quick brown\nfox jumps*over the lazy dog.
print('\n<HW10-3>')
Input = 'The quick brown\nfox jumps*over the lazy dog.'
print(re.split('\n|\*|; |, |\t|\|/',Input))

# 4. Write a regex script to find all three, four, five characters long words in a string and output it in a list.
##	Input text: The quick brown fox jumps over the lazy dog.
print('\n<HW10-4>')
Input = 'The quick brown fox jumps over the lazy dog.'
print(re.findall(r"\b\w{3,5}\b", Input))

# 5. Write a Python program to find all adverbs and their positions in a given sentence and give its start and end position.
# Use at least re.findall and re.search. Is there any other way execute this?
## Input text : text = "He was carefully disguised but captured quickly by police."
## Expected Output:0-7: Clearly (Hint: 2 adverbs)
print('\n<HW10-5>')
Input = "He was carefully disguised but captured quickly by police."
for adv in re.finditer(r"\w+ly", Input):
    print('%d-%d: %s' % (adv.start(), adv.end(), adv.group(0)))

# 6. In a imaginary Phone list
# Not all entries contain a phone number,
# If a phone number exists it is the first part of an entry, then separated by a blank a surname, which is followed by first names. Surname and first name are separated by a comma.
## Input = ["555-8396 Neu, Allison",
##     "Burns, C. Montgomery",
##     "555-5299 Putz, Lionel",
##     "555-7334 Simpson, Homer Jay"]
## Output:
## Allison Neu 555-8396
## C. Montgomery Burns
## Lionel Putz 555-5299
## Homer Jay Simpson 555-7334
print('\n<HW10-6>')
Input = ["555-8396 Neu, Allison",
     "Burns, C. Montgomery",
     "555-5299 Putz, Lionel",
     "555-7334 Simpson, Homer Jay"]
for i in Input:
    search = re.search(r"([0-9-]*)\s*([A-Za-z]+),\s+(.*)", i)
    print(search.group(3) + " " + search.group(2) + " " + search.group(1))

# 7. Do the following:
## (1) Use Biopython to read the DNA sequence from the file “Ciliate_gene.fasta”,
## (2) Perform translation using Biopython, by using the correct codon table for ciliates and report the final output (i.e., protein sequence) in the same .txt file.
## (3) For the DNA sequence (read in step1): Using regular expression, count the frequency of occurrence of each codon and give its start and end positions in a separate table in the same .txt file.
## (4) For the translated amino acid sequence: Using regular expression, count the frequency of occurrence of each codon and give positions in a separate table in the same .txt file.
## Note: the table should also be generated by program (not copy pasted)

handle = open("HW10_7_result.txt", "w")

## (1) Use Biopython to read the DNA sequence from the file “Ciliate_gene.fasta”.
from Bio import SeqIO
DNA = SeqIO.read("ciliate_gene.fasta", "fasta")
DNA_str = str(DNA.seq)
handle.write('\n\n(1) DNA:\n')
handle.write(DNA_str)

## (2) Perform translation using Biopython, by using the correct codon table for ciliates and report the final output (i.e., protein sequence) in the same .txt file.
Protein = DNA.seq.translate(table=6, to_stop=True) # codon table 6: The Ciliate, Dasycladacean and Hexamita Nuclear Code
Protein_str = str(Protein)
handle.write('\n\n(2) Protein:\n')
handle.write(Protein_str)

## (3) For the DNA sequence (read in step1): Using regular expression, count the frequency of occurrence of each codon and give its start and end positions in a separate table in the same .txt file.
## DNA_str = 'ATGGCTGATTAATTGACATTAGGATACTGGGGAATCAGAGGTCTAGGGTAGCCTTTGCGATATTATCTTGAATACCTTGGTTTACCTTATTAGGATAAAAGATACATGTCACCAGAAGAATGGTTTGGGGAAGTTGCCTAACCTCCTCTAAGCAATCAAGTTTTGGTTAACTTGCCATACATAAAGGATGGAGATAGGTGGATTTTCGAAAGCCAGGCTCTCTACGTGTACTTAGCTCATAAAGCCAACAGGACTGACCTCTTAGGGTCGACACCTGAAGAATAGGTGACTGTGGCTTAGGCAAGAGGGGTTCTGTAAGATGTTTTCAAAGTCTTCTACTCATTGCTTGTTCTTCCAGAAGAATAATATTAGGCTTAAAAAGCAGACTACTTCAAAAAGGAAGTGATGTGGCTTCTAGAAAAGCTAAATAAGTTCCTTGATGGAAAGAAGTGGGTGGCAGGTGGCAATCTCACATACATGGACTTCACAATTTATGAATTTGAGGAAACCTTGCAAGCTTATGATCCAGAAACTTTCGATCAATTACCATCCCTCAAGAAACATCAAGAAGAGTTTGCAAACCTTCCAAAAATCAAGGAATATATTGTTTCAGATAAATTTTTGGCAAGACCCTTTTTACCTCCTGACAGATGTAGATGGTATTGA'
handle.write('\n\n(3) DNA:\n')
Codon = ['AAA','AAT','AAC','AAG','ATA','ATT','ATC','ATG','ACA','ACT','ACC','ACG','AGA','AGT','AGC','AGG',
         'TAA','TAT','TAC','TAG','TTA','TTT','TTC','TTG','TCA','TCT','TCC','TCG','TGA','TGT','TGC','TGG',
         'CAA','CAT','CAC','CAG','CTA','CTT','CTC','CTG','CCA','CCT','CCC','CCG','CGA','CGT','CGC','CGG',
         'GAA','GAT','GAC','GAG','GTA','GTT','GTC','GTG','GCA','GCT','GCC','GCG','GGA','GGT','GGC','GGG']
for n in range(len(Codon)):
    s = [i.start() for i in re.finditer(Codon[n], DNA_str)]
    e = [i.end() for i in re.finditer(Codon[n], DNA_str)]
    for codon_index in range(len(s)-1,-1,-1):
        if s[codon_index]%3 != 0: # delete the codons that are not in frame
            del s[codon_index]
            del e[codon_index]
    result_final = []
    for result in range(len(s)):
        result_final.append(str(s[result])+'-'+str(e[result]-1))
    handle.write(str(Codon[n])+'\t'+str(result_final)+'\n')

## (4) For the translated amino acid sequence: Using regular expression, count the frequency of occurrence of each codon and give positions in a separate table in the same .txt file.
## Protein_str = 'MADQLTLGYWGIRGLGQPLRYYLEYLGLPYQDKRYMSPEEWFGEVAQPPLSNQVLVNLPYIKDGDRWIFESQALYVYLAHKANRTDLLGSTPEEQVTVAQARGVLQDVFKVFYSLLVLPEEQYQAQKADYFKKEVMWLLEKLNKFLDGKKWVAGGNLTYMDFTIYEFEETLQAYDPETFDQLPSLKKHQEEFANLPKIKEYIVSDKFLARPFLPPDRCRWY'
handle.write('\n\n(4) Protein:\n')
AminoAcid = ['A','C','D','E','F','G','H','I','K','L','M','N','P','Q','R','S','T','V','W','Y']
for n in range(len(AminoAcid)):
    handle.write(str(AminoAcid[n])+'\t'+str([i.start() for i in re.finditer(AminoAcid[n], Protein_str)])+'\n')

handle.close()

